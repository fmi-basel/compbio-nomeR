% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/infer_footprints_stan_sampling.R
\name{infer_footprints_stan_sampling}
\alias{infer_footprints_stan_sampling}
\title{Bayesian inference of footprint abundance using STAN algorithms}
\usage{
infer_footprints_stan_sampling(
  joint_freq_table,
  footprint_prior_diralphas = c(200, rep(1, 199)),
  bg_protect_prob = 0.01,
  ftp_protect_min = 0.6,
  ftp_protect_max = 0.9999,
  ftp_protect_mean = 0.95,
  ftp_protect_var = 0.01,
  nchains = 4,
  ncpu = 1L,
  rstan_control = list(max_treedepth = 15, adapt_delta = 0.9),
  ...
)
}
\arguments{
\item{joint_freq_table}{\code{data.frame} which must contain columns \code{S}, \code{N00},\code{N01},\code{N10},\code{N11}, 
where \code{S} represent spacings and \code{N00},\code{N01},\code{N10},\code{N11} are observed counts for 00, 01, 10 and 11 at spacing \code{S}.
This table can be obtained using function nomeR::count_joint_frequencies(...)}

\item{footprint_prior_diralphas}{vector containing parameters for dirichlet distribution which is used to model footprint abundances.
Default vector assumes that around 50\% of data is free of any footprints and all other footprint up-to 200bp have uninformative prior.}

\item{bg_protect_prob}{expected probability to observe 1 at a free position. In other words it is emission probability of background for 1.}

\item{ftp_protect_min}{minimum allowed value for footprint emission probability for 1.}

\item{ftp_protect_max}{maximum allowed value for footprint emission probability for 1.}

\item{ftp_protect_mean}{expected mean for footprint emission probability for 1.}

\item{ftp_protect_var}{expected variance for footprint emission probability for 1.}

\item{nchains}{number of markov chains to run.}

\item{ncpu}{number of CPUs to use.}

\item{rstan_control}{a list of tuning parameters for stan sampler algorithm.}

\item{...}{parameters for `rstan::sampling` function. Please check \code{?rstan::sampling}.

Emission probability for a footprint to observe 1 is one parameters 
apart from footprint abundances which will be inferred from the data.
It is modelled using truncated beta distribution which is parametrized by mean (ftp_protect_mean) and variance (ftp_protect_var).
Inequality ftp_protect_var < ftp_protect_mean * (1 - ftp_protect_mean) must hold for correct parameterization of beta distribution.}
}
\value{
S4 class \code{rstan::stanfit} representing the fitted results. Pleae check \code{?rstan::stanfit}.
}
\description{
This function uses rstan functionality for bayesian inference, in particular it is default Hamiltonian Monte Carlo and NUTS algorithms, to infer footprint abundance in NOMe-Seq data using sampling from posterior distribution.
}
\examples{


\dontrun{
 
## simple data with two ftp of 5 and 10 bps. 
## The table below is a count table of observed occurences of 00, 01, 10 and 11 at spacings from 1 until 15.
 
ftp_5_10_data <- data.frame("S" = 1:15,
                            "N00" = c(1626964,1508381,
                                      1420066,1336897,
                                      1258679,1185045,
                                      1136784,1090029,
                                      1045066,1001670,
                                      959927,983020,
                                      1000410,1012326,
                                      1019633),
                            "N01" = c(0,113856,
                                      197657,276539,
                                      350664,420399,
                                      464873,507988,
                                      549466,589487,
                                      627997,601629,
                                      580965,565776,
                                      555217),
                            "N10" = c(0, 113921,
                                      197854,276862,
                                      351147,421042,
                                      465716,509005,
                                      550645,590837,
                                      629533,603328,
                                      582814,567737,
                                      557220),
                            "N11" = c(873036,758842,
                                      674423,594702,
                                      519510,448514,
                                      402627,357978,
                                      314823,273006,
                                      232543,257023,
                                      275811,289161,
                                      297930))


## variational inference for footprints in the data
hmc_output <- infer_footprints_stan_sampling(joint_freq_table = ftp_5_10_data,
                                      footprint_prior_diralphas = c(10,rep(1,14)))
                                      
## check output in shinyapp for 
library(shinystan)
launch_shinystan(hmc_output)




}


}
