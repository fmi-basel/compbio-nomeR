// Generated by rstantools.  Do not edit by hand.

/*
    compbio-nomeR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    compbio-nomeR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with compbio-nomeR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_ftp_inference_ftp_bg_fixed_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 46> locations_array__ =
  {" (found before start of program)",
  " (in 'ftp_inference_ftp_bg_fixed', line 115, column 2 to column 33)",
  " (in 'ftp_inference_ftp_bg_fixed', line 139, column 2 to line 141, column 73)",
  " (in 'ftp_inference_ftp_bg_fixed', line 118, column 2 to column 35)",
  " (in 'ftp_inference_ftp_bg_fixed', line 120, column 2 to column 48)",
  " (in 'ftp_inference_ftp_bg_fixed', line 122, column 2 to column 121)",
  " (in 'ftp_inference_ftp_bg_fixed', line 123, column 2 to column 120)",
  " (in 'ftp_inference_ftp_bg_fixed', line 127, column 2 to line 136, column 4)",
  " (in 'ftp_inference_ftp_bg_fixed', line 73, column 2 to column 12)",
  " (in 'ftp_inference_ftp_bg_fixed', line 74, column 18 to column 23)",
  " (in 'ftp_inference_ftp_bg_fixed', line 74, column 2 to column 42)",
  " (in 'ftp_inference_ftp_bg_fixed', line 75, column 8 to column 13)",
  " (in 'ftp_inference_ftp_bg_fixed', line 75, column 2 to column 31)",
  " (in 'ftp_inference_ftp_bg_fixed', line 78, column 2 to column 13)",
  " (in 'ftp_inference_ftp_bg_fixed', line 79, column 24 to column 30)",
  " (in 'ftp_inference_ftp_bg_fixed', line 79, column 2 to column 32)",
  " (in 'ftp_inference_ftp_bg_fixed', line 80, column 30 to column 36)",
  " (in 'ftp_inference_ftp_bg_fixed', line 80, column 2 to column 40)",
  " (in 'ftp_inference_ftp_bg_fixed', line 85, column 2 to column 40)",
  " (in 'ftp_inference_ftp_bg_fixed', line 89, column 2 to column 47)",
  " (in 'ftp_inference_ftp_bg_fixed', line 99, column 2 to column 27)",
  " (in 'ftp_inference_ftp_bg_fixed', line 102, column 2 to column 30)",
  " (in 'ftp_inference_ftp_bg_fixed', line 106, column 4 to column 155)",
  " (in 'ftp_inference_ftp_bg_fixed', line 105, column 22 to line 107, column 3)",
  " (in 'ftp_inference_ftp_bg_fixed', line 105, column 2 to line 107, column 3)",
  " (in 'ftp_inference_ftp_bg_fixed', line 109, column 4 to column 195)",
  " (in 'ftp_inference_ftp_bg_fixed', line 108, column 108 to line 110, column 3)",
  " (in 'ftp_inference_ftp_bg_fixed', line 108, column 2 to line 110, column 3)",
  " (in 'ftp_inference_ftp_bg_fixed', line 115, column 10 to column 15)",
  " (in 'ftp_inference_ftp_bg_fixed', line 139, column 9 to column 14)",
  " (in 'ftp_inference_ftp_bg_fixed', line 17, column 11 to column 16)",
  " (in 'ftp_inference_ftp_bg_fixed', line 17, column 4 to column 34)",
  " (in 'ftp_inference_ftp_bg_fixed', line 20, column 6 to column 69)",
  " (in 'ftp_inference_ftp_bg_fixed', line 19, column 23 to line 21, column 5)",
  " (in 'ftp_inference_ftp_bg_fixed', line 19, column 4 to line 21, column 5)",
  " (in 'ftp_inference_ftp_bg_fixed', line 22, column 4 to column 59)",
  " (in 'ftp_inference_ftp_bg_fixed', line 23, column 4 to column 28)",
  " (in 'ftp_inference_ftp_bg_fixed', line 16, column 53 to line 24, column 3)",
  " (in 'ftp_inference_ftp_bg_fixed', line 37, column 11 to column 16)",
  " (in 'ftp_inference_ftp_bg_fixed', line 37, column 4 to column 34)",
  " (in 'ftp_inference_ftp_bg_fixed', line 40, column 6 to column 67)",
  " (in 'ftp_inference_ftp_bg_fixed', line 39, column 23 to line 41, column 5)",
  " (in 'ftp_inference_ftp_bg_fixed', line 39, column 4 to line 41, column 5)",
  " (in 'ftp_inference_ftp_bg_fixed', line 42, column 4 to column 59)",
  " (in 'ftp_inference_ftp_bg_fixed', line 43, column 4 to column 28)",
  " (in 'ftp_inference_ftp_bg_fixed', line 36, column 53 to line 44, column 3)"};
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
start_probs_2_cover_probs(const T0__& ftp_start_probs_arg__, const int&
                          n_ftp, const std::vector<int>& ftp_lengths,
                          std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
cover_probs_2_start_probs(const T0__& ftp_cover_probs_arg__, const int&
                          n_ftp, const std::vector<int>& ftp_lengths,
                          std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
start_probs_2_cover_probs(const T0__& ftp_start_probs_arg__, const int&
                          n_ftp, const std::vector<int>& ftp_lengths,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& ftp_start_probs = stan::math::to_ref(ftp_start_probs_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 30;
    stan::math::validate_non_negative_index("ftp_cover_probs", "n_ftp", n_ftp);
    Eigen::Matrix<local_scalar_t__,-1,1> ftp_cover_probs =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_ftp, DUMMY_VAR__);
    current_statement__ = 34;
    for (int ftp = 1; ftp <= n_ftp; ++ftp) {
      current_statement__ = 32;
      stan::model::assign(ftp_cover_probs,
        (stan::model::rvalue(ftp_start_probs, "ftp_start_probs",
           stan::model::index_uni(ftp)) *
        stan::model::rvalue(ftp_lengths, "ftp_lengths",
          stan::model::index_uni(ftp))),
        "assigning variable ftp_cover_probs", stan::model::index_uni(ftp));
    }
    current_statement__ = 35;
    stan::model::assign(ftp_cover_probs,
      stan::math::divide(stan::model::deep_copy(ftp_cover_probs),
        stan::math::sum(ftp_cover_probs)),
      "assigning variable ftp_cover_probs");
    current_statement__ = 36;
    return ftp_cover_probs;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
cover_probs_2_start_probs(const T0__& ftp_cover_probs_arg__, const int&
                          n_ftp, const std::vector<int>& ftp_lengths,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& ftp_cover_probs = stan::math::to_ref(ftp_cover_probs_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 38;
    stan::math::validate_non_negative_index("ftp_start_probs", "n_ftp", n_ftp);
    Eigen::Matrix<local_scalar_t__,-1,1> ftp_start_probs =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_ftp, DUMMY_VAR__);
    current_statement__ = 42;
    for (int ftp = 1; ftp <= n_ftp; ++ftp) {
      current_statement__ = 40;
      stan::model::assign(ftp_start_probs,
        (stan::model::rvalue(ftp_cover_probs, "ftp_cover_probs",
           stan::model::index_uni(ftp)) /
        stan::model::rvalue(ftp_lengths, "ftp_lengths",
          stan::model::index_uni(ftp))),
        "assigning variable ftp_start_probs", stan::model::index_uni(ftp));
    }
    current_statement__ = 43;
    stan::model::assign(ftp_start_probs,
      stan::math::divide(stan::model::deep_copy(ftp_start_probs),
        stan::math::sum(ftp_start_probs)),
      "assigning variable ftp_start_probs");
    current_statement__ = 44;
    return ftp_start_probs;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_ftp_inference_ftp_bg_fixed final : public model_base_crtp<model_ftp_inference_ftp_bg_fixed> {
private:
  int n_ftp;
  Eigen::Matrix<double,-1,1> ftp_prior_alphas_data__;
  std::vector<int> ftp_lengths;
  int n_spac;
  std::vector<int> spacings;
  std::vector<std::vector<int>> spacing_counts;
  double bg_protect_prob;
  double footprint_protect_prob;
  int max_spacing;
  Eigen::Map<Eigen::Matrix<double,-1,1>> ftp_prior_alphas{nullptr, 0};
public:
  ~model_ftp_inference_ftp_bg_fixed() {}
  model_ftp_inference_ftp_bg_fixed(stan::io::var_context& context__,
                                   unsigned int random_seed__ = 0,
                                   std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_ftp_inference_ftp_bg_fixed_namespace::model_ftp_inference_ftp_bg_fixed";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 8;
      context__.validate_dims("data initialization", "n_ftp", "int",
        std::vector<size_t>{});
      n_ftp = std::numeric_limits<int>::min();
      current_statement__ = 8;
      n_ftp = context__.vals_i("n_ftp")[(1 - 1)];
      current_statement__ = 9;
      stan::math::validate_non_negative_index("ftp_prior_alphas", "n_ftp",
        n_ftp);
      current_statement__ = 10;
      context__.validate_dims("data initialization", "ftp_prior_alphas",
        "double", std::vector<size_t>{static_cast<size_t>(n_ftp)});
      ftp_prior_alphas_data__ = Eigen::Matrix<double,-1,1>::Constant(n_ftp,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&ftp_prior_alphas)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ftp_prior_alphas_data__.data(),
        n_ftp);
      {
        std::vector<local_scalar_t__> ftp_prior_alphas_flat__;
        current_statement__ = 10;
        ftp_prior_alphas_flat__ = context__.vals_r("ftp_prior_alphas");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(ftp_prior_alphas,
            ftp_prior_alphas_flat__[(pos__ - 1)],
            "assigning variable ftp_prior_alphas",
            stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "ftp_prior_alphas",
        ftp_prior_alphas, 0);
      current_statement__ = 11;
      stan::math::validate_non_negative_index("ftp_lengths", "n_ftp", n_ftp);
      current_statement__ = 12;
      context__.validate_dims("data initialization", "ftp_lengths", "int",
        std::vector<size_t>{static_cast<size_t>(n_ftp)});
      ftp_lengths = std::vector<int>(n_ftp, std::numeric_limits<int>::min());
      current_statement__ = 12;
      ftp_lengths = context__.vals_i("ftp_lengths");
      current_statement__ = 13;
      context__.validate_dims("data initialization", "n_spac", "int",
        std::vector<size_t>{});
      n_spac = std::numeric_limits<int>::min();
      current_statement__ = 13;
      n_spac = context__.vals_i("n_spac")[(1 - 1)];
      current_statement__ = 14;
      stan::math::validate_non_negative_index("spacings", "n_spac", n_spac);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "spacings", "int",
        std::vector<size_t>{static_cast<size_t>(n_spac)});
      spacings = std::vector<int>(n_spac, std::numeric_limits<int>::min());
      current_statement__ = 15;
      spacings = context__.vals_i("spacings");
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "spacings", spacings, 1);
      current_statement__ = 16;
      stan::math::validate_non_negative_index("spacing_counts", "n_spac",
        n_spac);
      current_statement__ = 17;
      context__.validate_dims("data initialization", "spacing_counts", "int",
        std::vector<size_t>{static_cast<size_t>(n_spac),
          static_cast<size_t>(4)});
      spacing_counts = std::vector<std::vector<int>>(n_spac,
                         std::vector<int>(4, std::numeric_limits<int>::min()));
      {
        std::vector<int> spacing_counts_flat__;
        current_statement__ = 17;
        spacing_counts_flat__ = context__.vals_i("spacing_counts");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 17;
          for (int sym2__ = 1; sym2__ <= n_spac; ++sym2__) {
            current_statement__ = 17;
            stan::model::assign(spacing_counts, spacing_counts_flat__[(pos__
              - 1)], "assigning variable spacing_counts",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 17;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "spacing_counts",
        spacing_counts, 0);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "bg_protect_prob",
        "double", std::vector<size_t>{});
      bg_protect_prob = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 18;
      bg_protect_prob = context__.vals_r("bg_protect_prob")[(1 - 1)];
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "bg_protect_prob",
        bg_protect_prob, 0);
      current_statement__ = 18;
      stan::math::check_less_or_equal(function__, "bg_protect_prob",
        bg_protect_prob, 1);
      current_statement__ = 19;
      context__.validate_dims("data initialization",
        "footprint_protect_prob", "double", std::vector<size_t>{});
      footprint_protect_prob = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 19;
      footprint_protect_prob = context__.vals_r("footprint_protect_prob")[(1
        - 1)];
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__,
        "footprint_protect_prob", footprint_protect_prob, 0);
      current_statement__ = 19;
      stan::math::check_less_or_equal(function__, "footprint_protect_prob",
        footprint_protect_prob, 1);
      current_statement__ = 20;
      max_spacing = std::numeric_limits<int>::min();
      current_statement__ = 21;
      max_spacing = stan::math::max(spacings);
      current_statement__ = 24;
      if (stan::math::logical_neq(
            stan::model::rvalue(spacings, "spacings",
              stan::model::index_uni(1)), 1)) {
        current_statement__ = 22;
        std::stringstream errmsg_stream__;
        stan::math::stan_print(&errmsg_stream__,
          "Incorrect first element in spacings! First element in vector spacings (S) must be 1 which corresponds to total number of 0 and 1 in the data");
        throw std::domain_error(errmsg_stream__.str());
      }
      current_statement__ = 27;
      if (stan::math::logical_negation(
            (stan::math::primitive_value(
               (stan::math::primitive_value(
                  stan::math::logical_gt(
                    (stan::model::rvalue(spacing_counts, "spacing_counts",
                       stan::model::index_uni(1), stan::model::index_uni(1))
                    +
                    stan::model::rvalue(spacing_counts, "spacing_counts",
                      stan::model::index_uni(1), stan::model::index_uni(4))),
                    0)) &&
               stan::math::primitive_value(
                 stan::math::logical_eq(
                   stan::model::rvalue(spacing_counts, "spacing_counts",
                     stan::model::index_uni(1), stan::model::index_uni(2)), 0))))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(
                stan::model::rvalue(spacing_counts, "spacing_counts",
                  stan::model::index_uni(1), stan::model::index_uni(3)), 0))))) {
        current_statement__ = 25;
        std::stringstream errmsg_stream__;
        stan::math::stan_print(&errmsg_stream__,
          "Incorrect first row in spacing_counts! It must contain N00, N01, N10, N11 at spacing S=1. Namely N00 and N11 must represent number of 0 and 1 in the data and N01 and N10 must be 0.");
        throw std::domain_error(errmsg_stream__.str());
      }
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "max_spacing",
        max_spacing, 1);
      current_statement__ = 28;
      stan::math::validate_positive_index("ftp_cover_probs", "n_ftp", n_ftp);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("ftp_start_probs", "n_ftp",
        n_ftp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (n_ftp - 1);
  }
  inline std::string model_name() const final {
    return "model_ftp_inference_ftp_bg_fixed";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_ftp_inference_ftp_bg_fixed_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> ftp_cover_probs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_ftp, DUMMY_VAR__);
      current_statement__ = 1;
      ftp_cover_probs = in__.template read_constrain_simplex<
                          Eigen::Matrix<local_scalar_t__,-1,1>,
                          jacobian__>(lp__, n_ftp);
      {
        local_scalar_t__ total_prob_of_protected_pos = DUMMY_VAR__;
        current_statement__ = 4;
        lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(ftp_cover_probs,
                         ftp_prior_alphas));
        current_statement__ = 5;
        total_prob_of_protected_pos = ((bg_protect_prob *
          stan::model::rvalue(ftp_cover_probs, "ftp_cover_probs",
            stan::model::index_uni(1)))
          + (footprint_protect_prob * (1 -
          stan::model::rvalue(ftp_cover_probs, "ftp_cover_probs",
            stan::model::index_uni(1)))));
        current_statement__ = 6;
        lp_accum__.add(stan::math::binomial_lpmf<false>(
                         stan::model::rvalue(spacing_counts,
                           "spacing_counts", stan::model::index_uni(1),
                           stan::model::index_uni(4)),
                         (stan::model::rvalue(spacing_counts,
                            "spacing_counts", stan::model::index_uni(1),
                            stan::model::index_uni(1)) +
                         stan::model::rvalue(spacing_counts,
                           "spacing_counts", stan::model::index_uni(1),
                           stan::model::index_uni(4))),
                         total_prob_of_protected_pos));
        current_statement__ = 7;
        lp_accum__.add(ftp_model_loglik(ftp_cover_probs, n_ftp, ftp_lengths,
                         bg_protect_prob, footprint_protect_prob, spacings,
                         n_spac, max_spacing, spacing_counts, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_ftp_inference_ftp_bg_fixed_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> ftp_cover_probs =
        Eigen::Matrix<double,-1,1>::Constant(n_ftp,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      ftp_cover_probs = in__.template read_constrain_simplex<
                          Eigen::Matrix<local_scalar_t__,-1,1>,
                          jacobian__>(lp__, n_ftp);
      out__.write(ftp_cover_probs);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> ftp_start_probs =
        Eigen::Matrix<double,-1,1>::Constant(n_ftp,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      stan::model::assign(ftp_start_probs,
        cover_probs_2_start_probs(ftp_cover_probs, n_ftp, ftp_lengths,
          pstream__), "assigning variable ftp_start_probs");
      out__.write(ftp_start_probs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> ftp_cover_probs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_ftp, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(ftp_cover_probs,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_ftp),
        "assigning variable ftp_cover_probs");
      out__.write_free_simplex(ftp_cover_probs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "ftp_cover_probs",
        "double", std::vector<size_t>{static_cast<size_t>(n_ftp)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> ftp_cover_probs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_ftp, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> ftp_cover_probs_flat__;
        current_statement__ = 1;
        ftp_cover_probs_flat__ = context__.vals_r("ftp_cover_probs");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(ftp_cover_probs, ftp_cover_probs_flat__[(pos__
            - 1)], "assigning variable ftp_cover_probs",
            stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(ftp_cover_probs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"ftp_cover_probs"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"ftp_start_probs"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_ftp)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_ftp)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
      param_names__.emplace_back(std::string() + "ftp_cover_probs" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
        param_names__.emplace_back(std::string() + "ftp_start_probs" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= (n_ftp - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "ftp_cover_probs" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
        param_names__.emplace_back(std::string() + "ftp_start_probs" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"ftp_cover_probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_ftp) + "},\"block\":\"parameters\"},{\"name\":\"ftp_start_probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_ftp) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"ftp_cover_probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((n_ftp -1)) + "},\"block\":\"parameters\"},{\"name\":\"ftp_start_probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_ftp) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = n_ftp;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (n_ftp);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = n_ftp;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (n_ftp);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_ftp_inference_ftp_bg_fixed_namespace::model_ftp_inference_ftp_bg_fixed;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ftp_inference_ftp_bg_fixed_namespace::profiles__;
}
#endif
#endif
