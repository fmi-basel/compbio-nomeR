// Generated by rstantools.  Do not edit by hand.

/*
    compbio-nomeR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    compbio-nomeR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with compbio-nomeR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_footprint_inference_model_v1_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_footprint_inference_model_v1");
    reader.add_event(100, 98, "end", "model_footprint_inference_model_v1");
    return reader;
}
template <typename T0__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T3__, T4__>::type
ftp_model_loglik(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& ftp_cover_priors,
                     const int& n_ftp,
                     const std::vector<int>& ftp_lengths,
                     const T3__& bg_protect_prob,
                     const T4__& footprint_protect_prob,
                     const std::vector<int>& spacings,
                     const int& n_spac,
                     const int& max_spacing,
                     const std::vector<std::vector<int> >& emp_joint_counts, std::ostream* pstream__);
#include <stan_meta_header.hpp>
class model_footprint_inference_model_v1
  : public stan::model::model_base_crtp<model_footprint_inference_model_v1> {
private:
        int n_ftp;
        vector_d ftp_prior_alphas;
        int n_spac;
        std::vector<int> spacings;
        std::vector<std::vector<int> > spacing_counts;
        double bg_protect_prob;
        double ftp_protect_min;
        double ftp_protect_max;
        double ftp_protect_mean;
        double ftp_protect_var;
        std::vector<int> ftp_lengths;
        double ftp_protect_alpha;
        double ftp_protect_beta;
        int max_spacing;
public:
    model_footprint_inference_model_v1(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_footprint_inference_model_v1(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_footprint_inference_model_v1_namespace::model_footprint_inference_model_v1";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "n_ftp", "int", context__.to_vec());
            n_ftp = int(0);
            vals_i__ = context__.vals_i("n_ftp");
            pos__ = 0;
            n_ftp = vals_i__[pos__++];
            current_statement_begin__ = 20;
            validate_non_negative_index("ftp_prior_alphas", "n_ftp", n_ftp);
            context__.validate_dims("data initialization", "ftp_prior_alphas", "vector_d", context__.to_vec(n_ftp));
            ftp_prior_alphas = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_ftp);
            vals_r__ = context__.vals_r("ftp_prior_alphas");
            pos__ = 0;
            size_t ftp_prior_alphas_j_1_max__ = n_ftp;
            for (size_t j_1__ = 0; j_1__ < ftp_prior_alphas_j_1_max__; ++j_1__) {
                ftp_prior_alphas(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "ftp_prior_alphas", ftp_prior_alphas, 0);
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "n_spac", "int", context__.to_vec());
            n_spac = int(0);
            vals_i__ = context__.vals_i("n_spac");
            pos__ = 0;
            n_spac = vals_i__[pos__++];
            current_statement_begin__ = 22;
            validate_non_negative_index("spacings", "n_spac", n_spac);
            context__.validate_dims("data initialization", "spacings", "int", context__.to_vec(n_spac));
            spacings = std::vector<int>(n_spac, int(0));
            vals_i__ = context__.vals_i("spacings");
            pos__ = 0;
            size_t spacings_k_0_max__ = n_spac;
            for (size_t k_0__ = 0; k_0__ < spacings_k_0_max__; ++k_0__) {
                spacings[k_0__] = vals_i__[pos__++];
            }
            size_t spacings_i_0_max__ = n_spac;
            for (size_t i_0__ = 0; i_0__ < spacings_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "spacings[i_0__]", spacings[i_0__], 1);
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("spacing_counts", "n_spac", n_spac);
            validate_non_negative_index("spacing_counts", "4", 4);
            context__.validate_dims("data initialization", "spacing_counts", "int", context__.to_vec(n_spac,4));
            spacing_counts = std::vector<std::vector<int> >(n_spac, std::vector<int>(4, int(0)));
            vals_i__ = context__.vals_i("spacing_counts");
            pos__ = 0;
            size_t spacing_counts_k_0_max__ = n_spac;
            size_t spacing_counts_k_1_max__ = 4;
            for (size_t k_1__ = 0; k_1__ < spacing_counts_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < spacing_counts_k_0_max__; ++k_0__) {
                    spacing_counts[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t spacing_counts_i_0_max__ = n_spac;
            size_t spacing_counts_i_1_max__ = 4;
            for (size_t i_0__ = 0; i_0__ < spacing_counts_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < spacing_counts_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "spacing_counts[i_0__][i_1__]", spacing_counts[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "bg_protect_prob", "double", context__.to_vec());
            bg_protect_prob = double(0);
            vals_r__ = context__.vals_r("bg_protect_prob");
            pos__ = 0;
            bg_protect_prob = vals_r__[pos__++];
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "ftp_protect_min", "double", context__.to_vec());
            ftp_protect_min = double(0);
            vals_r__ = context__.vals_r("ftp_protect_min");
            pos__ = 0;
            ftp_protect_min = vals_r__[pos__++];
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "ftp_protect_max", "double", context__.to_vec());
            ftp_protect_max = double(0);
            vals_r__ = context__.vals_r("ftp_protect_max");
            pos__ = 0;
            ftp_protect_max = vals_r__[pos__++];
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "ftp_protect_mean", "double", context__.to_vec());
            ftp_protect_mean = double(0);
            vals_r__ = context__.vals_r("ftp_protect_mean");
            pos__ = 0;
            ftp_protect_mean = vals_r__[pos__++];
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "ftp_protect_var", "double", context__.to_vec());
            ftp_protect_var = double(0);
            vals_r__ = context__.vals_r("ftp_protect_var");
            pos__ = 0;
            ftp_protect_var = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 39;
            validate_non_negative_index("ftp_lengths", "n_ftp", n_ftp);
            ftp_lengths = std::vector<int>(n_ftp, int(0));
            stan::math::fill(ftp_lengths, std::numeric_limits<int>::min());
            current_statement_begin__ = 40;
            ftp_protect_alpha = double(0);
            stan::math::fill(ftp_protect_alpha, DUMMY_VAR__);
            current_statement_begin__ = 41;
            ftp_protect_beta = double(0);
            stan::math::fill(ftp_protect_beta, DUMMY_VAR__);
            current_statement_begin__ = 42;
            max_spacing = int(0);
            stan::math::fill(max_spacing, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 45;
            for (int ftpl = 1; ftpl <= n_ftp; ++ftpl) {
                current_statement_begin__ = 46;
                stan::model::assign(ftp_lengths, 
                            stan::model::cons_list(stan::model::index_uni(ftpl), stan::model::nil_index_list()), 
                            ftpl, 
                            "assigning variable ftp_lengths");
            }
            current_statement_begin__ = 50;
            stan::math::assign(max_spacing, max(spacings));
            current_statement_begin__ = 53;
            if (as_bool(logical_neq(get_base1(spacings, 1, "spacings", 1), 1))) {
                current_statement_begin__ = 54;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Incorrect first element in spacings! First element in vector spacings (S) must be 1 which corresponds to total number of 0 and 1 in the data";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 56;
            if (as_bool(logical_negation((primitive_value((primitive_value((primitive_value(logical_gt(get_base1(get_base1(spacing_counts, 1, "spacing_counts", 1), 1, "spacing_counts", 2), 0)) && primitive_value(logical_eq(get_base1(get_base1(spacing_counts, 1, "spacing_counts", 1), 2, "spacing_counts", 2), 0)))) && primitive_value(logical_eq(get_base1(get_base1(spacing_counts, 1, "spacing_counts", 1), 3, "spacing_counts", 2), 0)))) && primitive_value(logical_gt(get_base1(get_base1(spacing_counts, 1, "spacing_counts", 1), 4, "spacing_counts", 2), 0)))))) {
                current_statement_begin__ = 57;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Incorrect first row in spacing_counts! It must contain N00, N01, N10, N11 at spacing S=1. Namely N00 and N11 must represent nubmer of 0 and 1 in the data and N01 and N10 must be 0.";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 62;
            if (as_bool(logical_lt(ftp_protect_var, (ftp_protect_mean * (1 - ftp_protect_mean))))) {
                {
                current_statement_begin__ = 63;
                local_scalar_t__ ftp_nu(DUMMY_VAR__);
                (void) ftp_nu;  // dummy to suppress unused var warning
                stan::math::initialize(ftp_nu, DUMMY_VAR__);
                stan::math::fill(ftp_nu, DUMMY_VAR__);
                stan::math::assign(ftp_nu,(((ftp_protect_mean * (1 - ftp_protect_mean)) / ftp_protect_var) - 1));
                current_statement_begin__ = 64;
                stan::math::assign(ftp_protect_alpha, (ftp_protect_mean * ftp_nu));
                current_statement_begin__ = 65;
                stan::math::assign(ftp_protect_beta, ((1 - ftp_protect_mean) * ftp_nu));
                }
            } else {
                current_statement_begin__ = 67;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Incorrect values for ftp_protect_mean and ftp_protect_var! Inequality ftp_protect_var < ftp_protect_mean * (1 - ftp_protect_mean) must hold.";
                throw std::domain_error(errmsg_stream__.str());
            }
            // validate transformed data
            current_statement_begin__ = 39;
            size_t ftp_lengths_i_0_max__ = n_ftp;
            for (size_t i_0__ = 0; i_0__ < ftp_lengths_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ftp_lengths[i_0__]", ftp_lengths[i_0__], 1);
            }
            current_statement_begin__ = 40;
            check_greater_or_equal(function__, "ftp_protect_alpha", ftp_protect_alpha, 0);
            current_statement_begin__ = 41;
            check_greater_or_equal(function__, "ftp_protect_beta", ftp_protect_beta, 0);
            current_statement_begin__ = 42;
            check_greater_or_equal(function__, "max_spacing", max_spacing, 1);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 74;
            validate_non_negative_index("ftp_abundances", "n_ftp", n_ftp);
            num_params_r__ += (n_ftp - 1);
            current_statement_begin__ = 77;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_footprint_inference_model_v1() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 74;
        if (!(context__.contains_r("ftp_abundances")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ftp_abundances missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ftp_abundances");
        pos__ = 0U;
        validate_non_negative_index("ftp_abundances", "n_ftp", n_ftp);
        context__.validate_dims("parameter initialization", "ftp_abundances", "vector_d", context__.to_vec(n_ftp));
        Eigen::Matrix<double, Eigen::Dynamic, 1> ftp_abundances(n_ftp);
        size_t ftp_abundances_j_1_max__ = n_ftp;
        for (size_t j_1__ = 0; j_1__ < ftp_abundances_j_1_max__; ++j_1__) {
            ftp_abundances(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(ftp_abundances);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ftp_abundances: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 77;
        if (!(context__.contains_r("footprint_protect_prob")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable footprint_protect_prob missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("footprint_protect_prob");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "footprint_protect_prob", "double", context__.to_vec());
        double footprint_protect_prob(0);
        footprint_protect_prob = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(ftp_protect_min, ftp_protect_max, footprint_protect_prob);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable footprint_protect_prob: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 74;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ftp_abundances;
            (void) ftp_abundances;  // dummy to suppress unused var warning
            if (jacobian__)
                ftp_abundances = in__.simplex_constrain(n_ftp, lp__);
            else
                ftp_abundances = in__.simplex_constrain(n_ftp);
            current_statement_begin__ = 77;
            local_scalar_t__ footprint_protect_prob;
            (void) footprint_protect_prob;  // dummy to suppress unused var warning
            if (jacobian__)
                footprint_protect_prob = in__.scalar_lub_constrain(ftp_protect_min, ftp_protect_max, lp__);
            else
                footprint_protect_prob = in__.scalar_lub_constrain(ftp_protect_min, ftp_protect_max);
            // model body
            current_statement_begin__ = 82;
            lp_accum__.add(dirichlet_log<propto__>(ftp_abundances, ftp_prior_alphas));
            current_statement_begin__ = 85;
            lp_accum__.add(beta_log<propto__>(footprint_protect_prob, ftp_protect_alpha, ftp_protect_beta));
            current_statement_begin__ = 88;
            lp_accum__.add(ftp_model_loglik(ftp_abundances, n_ftp, ftp_lengths, bg_protect_prob, footprint_protect_prob, spacings, n_spac, max_spacing, spacing_counts, pstream__));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("ftp_abundances");
        names__.push_back("footprint_protect_prob");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_ftp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_footprint_inference_model_v1_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> ftp_abundances = in__.simplex_constrain(n_ftp);
        size_t ftp_abundances_j_1_max__ = n_ftp;
        for (size_t j_1__ = 0; j_1__ < ftp_abundances_j_1_max__; ++j_1__) {
            vars__.push_back(ftp_abundances(j_1__));
        }
        double footprint_protect_prob = in__.scalar_lub_constrain(ftp_protect_min, ftp_protect_max);
        vars__.push_back(footprint_protect_prob);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_footprint_inference_model_v1";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t ftp_abundances_j_1_max__ = n_ftp;
        for (size_t j_1__ = 0; j_1__ < ftp_abundances_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ftp_abundances" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "footprint_protect_prob";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t ftp_abundances_j_1_max__ = (n_ftp - 1);
        for (size_t j_1__ = 0; j_1__ < ftp_abundances_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ftp_abundances" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "footprint_protect_prob";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_footprint_inference_model_v1_namespace::model_footprint_inference_model_v1 stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
