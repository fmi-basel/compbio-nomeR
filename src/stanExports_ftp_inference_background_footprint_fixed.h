// Generated by rstantools.  Do not edit by hand.

/*
    compbio-nomeR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    compbio-nomeR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with compbio-nomeR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_ftp_inference_background_footprint_fixed_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 119, column 2 to column 33)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 143, column 2 to line 145, column 73)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 122, column 2 to column 35)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 124, column 2 to column 48)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 126, column 2 to column 121)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 127, column 2 to column 120)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 131, column 2 to line 140, column 4)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 73, column 2 to column 12)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 74, column 18 to column 23)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 74, column 2 to column 42)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 75, column 2 to column 13)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 76, column 24 to column 30)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 76, column 2 to column 32)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 77, column 30 to column 36)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 77, column 2 to column 40)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 82, column 2 to column 40)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 86, column 2 to column 47)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 89, column 2 to column 23)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 90, column 2 to column 23)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 91, column 2 to column 34)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 92, column 2 to column 33)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 96, column 27 to column 32)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 96, column 2 to column 34)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 98, column 2 to column 27)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 102, column 4 to column 29)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 101, column 23 to line 103, column 3)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 101, column 2 to line 103, column 3)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 106, column 2 to column 30)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 110, column 4 to column 155)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 109, column 22 to line 111, column 3)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 109, column 2 to line 111, column 3)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 113, column 4 to column 195)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 112, column 108 to line 114, column 3)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 112, column 2 to line 114, column 3)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 119, column 10 to column 15)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 143, column 9 to column 14)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 17, column 11 to column 16)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 17, column 4 to column 34)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 20, column 6 to column 69)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 19, column 23 to line 21, column 5)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 19, column 4 to line 21, column 5)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 22, column 4 to column 59)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 23, column 4 to column 28)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 16, column 53 to line 24, column 3)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 37, column 11 to column 16)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 37, column 4 to column 34)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 40, column 6 to column 67)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 39, column 23 to line 41, column 5)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 39, column 4 to line 41, column 5)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 42, column 4 to column 59)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 43, column 4 to column 28)",
                                                      " (in 'ftp_inference_background_footprint_fixed', line 36, column 53 to line 44, column 3)"};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
start_probs_2_cover_probs(const T0__& ftp_start_probs_arg__,
                          const int& n_ftp,
                          const std::vector<int>& ftp_lengths,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& ftp_start_probs = to_ref(ftp_start_probs_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 37;
    validate_non_negative_index("ftp_cover_probs", "n_ftp", n_ftp);
    Eigen::Matrix<local_scalar_t__, -1, 1> ftp_cover_probs;
    ftp_cover_probs = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ftp);
    stan::math::fill(ftp_cover_probs, DUMMY_VAR__);
    
    current_statement__ = 41;
    for (int ftp = 1; ftp <= n_ftp; ++ftp) {
      current_statement__ = 39;
      assign(ftp_cover_probs, cons_list(index_uni(ftp), nil_index_list()),
        (ftp_start_probs[(ftp - 1)] * ftp_lengths[(ftp - 1)]),
        "assigning variable ftp_cover_probs");}
    current_statement__ = 42;
    assign(ftp_cover_probs, nil_index_list(),
      divide(stan::model::deep_copy(ftp_cover_probs), sum(ftp_cover_probs)),
      "assigning variable ftp_cover_probs");
    current_statement__ = 43;
    return ftp_cover_probs;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct start_probs_2_cover_probs_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& ftp_start_probs, const int& n_ftp,
           const std::vector<int>& ftp_lengths, std::ostream* pstream__)  const 
{
return start_probs_2_cover_probs(ftp_start_probs, n_ftp, ftp_lengths,
         pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
cover_probs_2_start_probs(const T0__& ftp_cover_probs_arg__,
                          const int& n_ftp,
                          const std::vector<int>& ftp_lengths,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& ftp_cover_probs = to_ref(ftp_cover_probs_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 45;
    validate_non_negative_index("ftp_start_probs", "n_ftp", n_ftp);
    Eigen::Matrix<local_scalar_t__, -1, 1> ftp_start_probs;
    ftp_start_probs = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ftp);
    stan::math::fill(ftp_start_probs, DUMMY_VAR__);
    
    current_statement__ = 49;
    for (int ftp = 1; ftp <= n_ftp; ++ftp) {
      current_statement__ = 47;
      assign(ftp_start_probs, cons_list(index_uni(ftp), nil_index_list()),
        (ftp_cover_probs[(ftp - 1)] / ftp_lengths[(ftp - 1)]),
        "assigning variable ftp_start_probs");}
    current_statement__ = 50;
    assign(ftp_start_probs, nil_index_list(),
      divide(stan::model::deep_copy(ftp_start_probs), sum(ftp_start_probs)),
      "assigning variable ftp_start_probs");
    current_statement__ = 51;
    return ftp_start_probs;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct cover_probs_2_start_probs_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& ftp_cover_probs, const int& n_ftp,
           const std::vector<int>& ftp_lengths, std::ostream* pstream__)  const 
{
return cover_probs_2_start_probs(ftp_cover_probs, n_ftp, ftp_lengths,
         pstream__);
}
};
template <typename T0__, typename T3__, typename T4__>
stan::promote_args_t<stan::value_type_t<T0__>, T3__,
T4__>
ftp_model_loglik(const T0__& ftp_cover_probs_arg__, const int& n_ftp,
                 const std::vector<int>& ftp_lengths,
                 const T3__& bg_protect_prob,
                 const T4__& footprint_protect_prob,
                 const std::vector<int>& spacings, const int& n_spac,
                 const int& max_spacing,
                 const std::vector<std::vector<int>>& emp_joint_counts,
                 std::ostream* pstream__) ;
#include <stan_meta_header.hpp>
class model_ftp_inference_background_footprint_fixed final : public model_base_crtp<model_ftp_inference_background_footprint_fixed> {
private:
  int n_ftp;
  Eigen::Matrix<double, -1, 1> ftp_prior_alphas;
  int n_spac;
  std::vector<int> spacings;
  std::vector<std::vector<int>> spacing_counts;
  double bg_protect_prob;
  double footprint_protect_prob;
  double ftp_protect_min;
  double ftp_protect_max;
  double ftp_protect_alpha;
  double ftp_protect_beta;
  std::vector<int> ftp_lengths;
  int max_spacing;
 
public:
  ~model_ftp_inference_background_footprint_fixed() { }
  
  inline std::string model_name() const final { return "model_ftp_inference_background_footprint_fixed"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_ftp_inference_background_footprint_fixed(stan::io::var_context& context__,
                                                 unsigned int random_seed__ = 0,
                                                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_ftp_inference_background_footprint_fixed_namespace::model_ftp_inference_background_footprint_fixed";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 8;
      context__.validate_dims("data initialization","n_ftp","int",
          context__.to_vec());
      n_ftp = std::numeric_limits<int>::min();
      
      current_statement__ = 8;
      n_ftp = context__.vals_i("n_ftp")[(1 - 1)];
      current_statement__ = 9;
      validate_non_negative_index("ftp_prior_alphas", "n_ftp", n_ftp);
      current_statement__ = 10;
      context__.validate_dims("data initialization","ftp_prior_alphas",
          "double",context__.to_vec(n_ftp));
      ftp_prior_alphas = Eigen::Matrix<double, -1, 1>(n_ftp);
      stan::math::fill(ftp_prior_alphas, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ftp_prior_alphas_flat__;
        current_statement__ = 10;
        assign(ftp_prior_alphas_flat__, nil_index_list(),
          context__.vals_r("ftp_prior_alphas"),
          "assigning variable ftp_prior_alphas_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
          current_statement__ = 10;
          assign(ftp_prior_alphas,
            cons_list(index_uni(sym1__), nil_index_list()),
            ftp_prior_alphas_flat__[(pos__ - 1)],
            "assigning variable ftp_prior_alphas");
          current_statement__ = 10;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
        current_statement__ = 10;
        current_statement__ = 10;
        check_greater_or_equal(function__, "ftp_prior_alphas[sym1__]",
                               ftp_prior_alphas[(sym1__ - 1)], 0);}
      current_statement__ = 11;
      context__.validate_dims("data initialization","n_spac","int",
          context__.to_vec());
      n_spac = std::numeric_limits<int>::min();
      
      current_statement__ = 11;
      n_spac = context__.vals_i("n_spac")[(1 - 1)];
      current_statement__ = 12;
      validate_non_negative_index("spacings", "n_spac", n_spac);
      current_statement__ = 13;
      context__.validate_dims("data initialization","spacings","int",
          context__.to_vec(n_spac));
      spacings = std::vector<int>(n_spac, std::numeric_limits<int>::min());
      
      current_statement__ = 13;
      assign(spacings, nil_index_list(), context__.vals_i("spacings"),
        "assigning variable spacings");
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= n_spac; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_greater_or_equal(function__, "spacings[sym1__]",
                               spacings[(sym1__ - 1)], 1);}
      current_statement__ = 14;
      validate_non_negative_index("spacing_counts", "n_spac", n_spac);
      current_statement__ = 15;
      context__.validate_dims("data initialization","spacing_counts","int",
          context__.to_vec(n_spac, 4));
      spacing_counts = std::vector<std::vector<int>>(n_spac, std::vector<int>(4, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> spacing_counts_flat__;
        current_statement__ = 15;
        assign(spacing_counts_flat__, nil_index_list(),
          context__.vals_i("spacing_counts"),
          "assigning variable spacing_counts_flat__");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 15;
          for (int sym2__ = 1; sym2__ <= n_spac; ++sym2__) {
            current_statement__ = 15;
            assign(spacing_counts,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              spacing_counts_flat__[(pos__ - 1)],
              "assigning variable spacing_counts");
            current_statement__ = 15;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= n_spac; ++sym1__) {
        current_statement__ = 15;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          current_statement__ = 15;
          current_statement__ = 15;
          check_greater_or_equal(function__,
                                 "spacing_counts[sym1__, sym2__]",
                                 spacing_counts[(sym1__ - 1)][(sym2__ - 1)],
                                 0);}}
      current_statement__ = 16;
      context__.validate_dims("data initialization","bg_protect_prob",
          "double",context__.to_vec());
      bg_protect_prob = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      bg_protect_prob = context__.vals_r("bg_protect_prob")[(1 - 1)];
      current_statement__ = 16;
      current_statement__ = 16;
      check_greater_or_equal(function__, "bg_protect_prob", bg_protect_prob,
                             0);
      current_statement__ = 16;
      current_statement__ = 16;
      check_less_or_equal(function__, "bg_protect_prob", bg_protect_prob, 1);
      current_statement__ = 17;
      context__.validate_dims("data initialization","footprint_protect_prob",
          "double",context__.to_vec());
      footprint_protect_prob = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      footprint_protect_prob = context__.vals_r("footprint_protect_prob")[
          (1 - 1)];
      current_statement__ = 17;
      current_statement__ = 17;
      check_greater_or_equal(function__, "footprint_protect_prob",
                             footprint_protect_prob, 0);
      current_statement__ = 17;
      current_statement__ = 17;
      check_less_or_equal(function__, "footprint_protect_prob",
                          footprint_protect_prob, 1);
      current_statement__ = 18;
      context__.validate_dims("data initialization","ftp_protect_min",
          "double",context__.to_vec());
      ftp_protect_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      ftp_protect_min = context__.vals_r("ftp_protect_min")[(1 - 1)];
      current_statement__ = 19;
      context__.validate_dims("data initialization","ftp_protect_max",
          "double",context__.to_vec());
      ftp_protect_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      ftp_protect_max = context__.vals_r("ftp_protect_max")[(1 - 1)];
      current_statement__ = 20;
      context__.validate_dims("data initialization","ftp_protect_alpha",
          "double",context__.to_vec());
      ftp_protect_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      ftp_protect_alpha = context__.vals_r("ftp_protect_alpha")[(1 - 1)];
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "ftp_protect_alpha",
                             ftp_protect_alpha, 0);
      current_statement__ = 21;
      context__.validate_dims("data initialization","ftp_protect_beta",
          "double",context__.to_vec());
      ftp_protect_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      ftp_protect_beta = context__.vals_r("ftp_protect_beta")[(1 - 1)];
      current_statement__ = 21;
      current_statement__ = 21;
      check_greater_or_equal(function__, "ftp_protect_beta",
                             ftp_protect_beta, 0);
      current_statement__ = 22;
      validate_non_negative_index("ftp_lengths", "n_ftp", n_ftp);
      current_statement__ = 23;
      ftp_lengths = std::vector<int>(n_ftp, std::numeric_limits<int>::min());
      
      current_statement__ = 24;
      max_spacing = std::numeric_limits<int>::min();
      
      current_statement__ = 27;
      for (int ftpl = 1; ftpl <= n_ftp; ++ftpl) {
        current_statement__ = 25;
        assign(ftp_lengths, cons_list(index_uni(ftpl), nil_index_list()),
          ftpl, "assigning variable ftp_lengths");}
      current_statement__ = 28;
      max_spacing = max(spacings);
      current_statement__ = 31;
      if (logical_neq(spacings[(1 - 1)], 1)) {
        current_statement__ = 29;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "Incorrect first element in spacings! First element in vector spacings (S) must be 1 which corresponds to total number of 0 and 1 in the data";
        throw std::domain_error(errmsg_stream__.str());
      } 
      current_statement__ = 34;
      if (logical_negation((primitive_value((primitive_value(
            logical_gt(
              (spacing_counts[(1 - 1)][(1 - 1)] +
                spacing_counts[(1 - 1)][(4 - 1)]), 0)) && primitive_value(
            logical_eq(spacing_counts[(1 - 1)][(2 - 1)], 0)))) &&
            primitive_value(
            logical_eq(spacing_counts[(1 - 1)][(3 - 1)], 0))))) {
        current_statement__ = 32;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "Incorrect first row in spacing_counts! It must contain N00, N01, N10, N11 at spacing S=1. Namely N00 and N11 must represent number of 0 and 1 in the data and N01 and N10 must be 0.";
        throw std::domain_error(errmsg_stream__.str());
      } 
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
        current_statement__ = 23;
        current_statement__ = 23;
        check_greater_or_equal(function__, "ftp_lengths[sym1__]",
                               ftp_lengths[(sym1__ - 1)], 1);}
      current_statement__ = 24;
      current_statement__ = 24;
      check_greater_or_equal(function__, "max_spacing", max_spacing, 1);
      current_statement__ = 35;
      validate_positive_index("ftp_cover_probs", "n_ftp", n_ftp);
      current_statement__ = 36;
      validate_non_negative_index("ftp_start_probs", "n_ftp", n_ftp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += (n_ftp - 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_ftp_inference_background_footprint_fixed_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> ftp_cover_probs;
      ftp_cover_probs = Eigen::Matrix<local_scalar_t__, -1, 1>(n_ftp);
      stan::math::fill(ftp_cover_probs, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ftp_cover_probs_in__;
      ftp_cover_probs_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((n_ftp -
                                                                    1));
      stan::math::fill(ftp_cover_probs_in__, DUMMY_VAR__);
      
      current_statement__ = 1;
      ftp_cover_probs_in__ = in__.vector((n_ftp - 1));
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        assign(ftp_cover_probs, nil_index_list(),
          stan::math::simplex_constrain(ftp_cover_probs_in__, lp__),
          "assigning variable ftp_cover_probs");
      } else {
        current_statement__ = 1;
        assign(ftp_cover_probs, nil_index_list(),
          stan::math::simplex_constrain(ftp_cover_probs_in__),
          "assigning variable ftp_cover_probs");
      }
      {
        local_scalar_t__ total_prob_of_protected_pos;
        total_prob_of_protected_pos = DUMMY_VAR__;
        
        current_statement__ = 4;
        lp_accum__.add(
          dirichlet_lpdf<propto__>(ftp_cover_probs, ftp_prior_alphas));
        current_statement__ = 5;
        total_prob_of_protected_pos = ((bg_protect_prob *
                                         ftp_cover_probs[(1 - 1)]) +
                                        (footprint_protect_prob *
                                          (1 - ftp_cover_probs[(1 - 1)])));
        current_statement__ = 6;
        lp_accum__.add(
          binomial_lpmf<false>(spacing_counts[(1 - 1)][(4 - 1)],
            (spacing_counts[(1 - 1)][(1 - 1)] +
              spacing_counts[(1 - 1)][(4 - 1)]), total_prob_of_protected_pos));
        current_statement__ = 7;
        lp_accum__.add(
          ftp_model_loglik(ftp_cover_probs, n_ftp, ftp_lengths,
            bg_protect_prob, footprint_protect_prob, spacings, n_spac,
            max_spacing, spacing_counts, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_ftp_inference_background_footprint_fixed_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> ftp_cover_probs;
      ftp_cover_probs = Eigen::Matrix<double, -1, 1>(n_ftp);
      stan::math::fill(ftp_cover_probs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ftp_cover_probs_in__;
      ftp_cover_probs_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((n_ftp -
                                                                    1));
      stan::math::fill(ftp_cover_probs_in__, DUMMY_VAR__);
      
      current_statement__ = 1;
      ftp_cover_probs_in__ = in__.vector((n_ftp - 1));
      current_statement__ = 1;
      assign(ftp_cover_probs, nil_index_list(),
        stan::math::simplex_constrain(ftp_cover_probs_in__),
        "assigning variable ftp_cover_probs");
      for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
        vars__.emplace_back(ftp_cover_probs[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> ftp_start_probs;
      ftp_start_probs = Eigen::Matrix<double, -1, 1>(n_ftp);
      stan::math::fill(ftp_start_probs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(ftp_start_probs, nil_index_list(),
        cover_probs_2_start_probs(ftp_cover_probs, n_ftp,
          ftp_lengths, pstream__), "assigning variable ftp_start_probs");
      for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
        vars__.emplace_back(ftp_start_probs[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> ftp_cover_probs;
      ftp_cover_probs = Eigen::Matrix<double, -1, 1>(n_ftp);
      stan::math::fill(ftp_cover_probs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ftp_cover_probs_flat__;
        current_statement__ = 1;
        assign(ftp_cover_probs_flat__, nil_index_list(),
          context__.vals_r("ftp_cover_probs"),
          "assigning variable ftp_cover_probs_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
          current_statement__ = 1;
          assign(ftp_cover_probs,
            cons_list(index_uni(sym1__), nil_index_list()),
            ftp_cover_probs_flat__[(pos__ - 1)],
            "assigning variable ftp_cover_probs");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> ftp_cover_probs_free__;
      ftp_cover_probs_free__ = Eigen::Matrix<double, -1, 1>((n_ftp - 1));
      stan::math::fill(ftp_cover_probs_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(ftp_cover_probs_free__, nil_index_list(),
        stan::math::simplex_free(ftp_cover_probs),
        "assigning variable ftp_cover_probs_free__");
      for (int sym1__ = 1; sym1__ <= (n_ftp - 1); ++sym1__) {
        vars__.emplace_back(ftp_cover_probs_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("ftp_cover_probs");
    names__.emplace_back("ftp_start_probs");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_ftp)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_ftp)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ftp_cover_probs" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ftp_start_probs" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= (n_ftp - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ftp_cover_probs" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_ftp; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ftp_start_probs" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"ftp_cover_probs\",\"type\":{\"name\":\"vector\",\"length\":" << n_ftp << "},\"block\":\"parameters\"},{\"name\":\"ftp_start_probs\",\"type\":{\"name\":\"vector\",\"length\":" << n_ftp << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"ftp_cover_probs\",\"type\":{\"name\":\"vector\",\"length\":" << (n_ftp - 1) << "},\"block\":\"parameters\"},{\"name\":\"ftp_start_probs\",\"type\":{\"name\":\"vector\",\"length\":" << n_ftp << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_ftp_inference_background_footprint_fixed_namespace::model_ftp_inference_background_footprint_fixed;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ftp_inference_background_footprint_fixed_namespace::profiles__;
}
#endif
#endif
