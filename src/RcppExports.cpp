// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// run_cpp_nomeR
List run_cpp_nomeR(const List& data, const List& binding_models, const NumericVector& bgprotectprob, const NumericVector& bgprior, const NumericVector& Ncpu, const LogicalVector& verbose);
RcppExport SEXP _nomeR_run_cpp_nomeR(SEXP dataSEXP, SEXP binding_modelsSEXP, SEXP bgprotectprobSEXP, SEXP bgpriorSEXP, SEXP NcpuSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List& >::type binding_models(binding_modelsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type bgprotectprob(bgprotectprobSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type bgprior(bgpriorSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type Ncpu(NcpuSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(run_cpp_nomeR(data, binding_models, bgprotectprob, bgprior, Ncpu, verbose));
    return rcpp_result_gen;
END_RCPP
}
// count_spacing_freq_cpp
List count_spacing_freq_cpp(const List& data, const IntegerVector& maxspacing, const IntegerVector& maxwmlen);
RcppExport SEXP _nomeR_count_spacing_freq_cpp(SEXP dataSEXP, SEXP maxspacingSEXP, SEXP maxwmlenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type maxspacing(maxspacingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type maxwmlen(maxwmlenSEXP);
    rcpp_result_gen = Rcpp::wrap(count_spacing_freq_cpp(data, maxspacing, maxwmlen));
    return rcpp_result_gen;
END_RCPP
}
// calculate_theor_joint_prob_cpp
List calculate_theor_joint_prob_cpp(const NumericVector& ftp_cover_priors, const NumericVector& bg_protect_prob, const NumericVector& footprint_protect_prob, const IntegerVector& max_spacing);
RcppExport SEXP _nomeR_calculate_theor_joint_prob_cpp(SEXP ftp_cover_priorsSEXP, SEXP bg_protect_probSEXP, SEXP footprint_protect_probSEXP, SEXP max_spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type ftp_cover_priors(ftp_cover_priorsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type bg_protect_prob(bg_protect_probSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type footprint_protect_prob(footprint_protect_probSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type max_spacing(max_spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_theor_joint_prob_cpp(ftp_cover_priors, bg_protect_prob, footprint_protect_prob, max_spacing));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_stan_fit4background_mixture_model_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4footprint_inference_model_v1_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4ftp_inference_background_fixed_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4ftp_inference_background_informative_prior_mod();

static const R_CallMethodDef CallEntries[] = {
    {"_nomeR_run_cpp_nomeR", (DL_FUNC) &_nomeR_run_cpp_nomeR, 6},
    {"_nomeR_count_spacing_freq_cpp", (DL_FUNC) &_nomeR_count_spacing_freq_cpp, 3},
    {"_nomeR_calculate_theor_joint_prob_cpp", (DL_FUNC) &_nomeR_calculate_theor_joint_prob_cpp, 4},
    {"_rcpp_module_boot_stan_fit4background_mixture_model_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4background_mixture_model_mod, 0},
    {"_rcpp_module_boot_stan_fit4footprint_inference_model_v1_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4footprint_inference_model_v1_mod, 0},
    {"_rcpp_module_boot_stan_fit4ftp_inference_background_fixed_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4ftp_inference_background_fixed_mod, 0},
    {"_rcpp_module_boot_stan_fit4ftp_inference_background_informative_prior_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4ftp_inference_background_informative_prior_mod, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_nomeR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
