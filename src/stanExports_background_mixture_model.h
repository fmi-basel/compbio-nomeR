// Generated by rstantools.  Do not edit by hand.

/*
    compbio-nomeR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    compbio-nomeR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with compbio-nomeR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_background_mixture_model_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_background_mixture_model");
    reader.add_event(83, 81, "end", "model_background_mixture_model");
    return reader;
}
#include <stan_meta_header.hpp>
class model_background_mixture_model : public prob_grad {
private:
        int n_table_entries;
        std::vector<int> n_total_pos;
        std::vector<int> n_protect_pos;
        std::vector<int> n_frequencies;
        double alpha_distrbetaprior_mixcoeff;
        double beta_distrbetaprior_mixcoeff;
        double alpha_distrbetaprior_bg_protect;
        double beta_distrbetaprior_bg_protect;
public:
    model_background_mixture_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_background_mixture_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_background_mixture_model_namespace::model_background_mixture_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "n_table_entries", "int", context__.to_vec());
            n_table_entries = int(0);
            vals_i__ = context__.vals_i("n_table_entries");
            pos__ = 0;
            n_table_entries = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_table_entries", n_table_entries, 1);
            current_statement_begin__ = 19;
            validate_non_negative_index("n_total_pos", "n_table_entries", n_table_entries);
            context__.validate_dims("data initialization", "n_total_pos", "int", context__.to_vec(n_table_entries));
            n_total_pos = std::vector<int>(n_table_entries, int(0));
            vals_i__ = context__.vals_i("n_total_pos");
            pos__ = 0;
            size_t n_total_pos_k_0_max__ = n_table_entries;
            for (size_t k_0__ = 0; k_0__ < n_total_pos_k_0_max__; ++k_0__) {
                n_total_pos[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("n_protect_pos", "n_table_entries", n_table_entries);
            context__.validate_dims("data initialization", "n_protect_pos", "int", context__.to_vec(n_table_entries));
            n_protect_pos = std::vector<int>(n_table_entries, int(0));
            vals_i__ = context__.vals_i("n_protect_pos");
            pos__ = 0;
            size_t n_protect_pos_k_0_max__ = n_table_entries;
            for (size_t k_0__ = 0; k_0__ < n_protect_pos_k_0_max__; ++k_0__) {
                n_protect_pos[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("n_frequencies", "n_table_entries", n_table_entries);
            context__.validate_dims("data initialization", "n_frequencies", "int", context__.to_vec(n_table_entries));
            n_frequencies = std::vector<int>(n_table_entries, int(0));
            vals_i__ = context__.vals_i("n_frequencies");
            pos__ = 0;
            size_t n_frequencies_k_0_max__ = n_table_entries;
            for (size_t k_0__ = 0; k_0__ < n_frequencies_k_0_max__; ++k_0__) {
                n_frequencies[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "alpha_distrbetaprior_mixcoeff", "double", context__.to_vec());
            alpha_distrbetaprior_mixcoeff = double(0);
            vals_r__ = context__.vals_r("alpha_distrbetaprior_mixcoeff");
            pos__ = 0;
            alpha_distrbetaprior_mixcoeff = vals_r__[pos__++];
            check_greater_or_equal(function__, "alpha_distrbetaprior_mixcoeff", alpha_distrbetaprior_mixcoeff, 0);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "beta_distrbetaprior_mixcoeff", "double", context__.to_vec());
            beta_distrbetaprior_mixcoeff = double(0);
            vals_r__ = context__.vals_r("beta_distrbetaprior_mixcoeff");
            pos__ = 0;
            beta_distrbetaprior_mixcoeff = vals_r__[pos__++];
            check_greater_or_equal(function__, "beta_distrbetaprior_mixcoeff", beta_distrbetaprior_mixcoeff, 0);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "alpha_distrbetaprior_bg_protect", "double", context__.to_vec());
            alpha_distrbetaprior_bg_protect = double(0);
            vals_r__ = context__.vals_r("alpha_distrbetaprior_bg_protect");
            pos__ = 0;
            alpha_distrbetaprior_bg_protect = vals_r__[pos__++];
            check_greater_or_equal(function__, "alpha_distrbetaprior_bg_protect", alpha_distrbetaprior_bg_protect, 0);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "beta_distrbetaprior_bg_protect", "double", context__.to_vec());
            beta_distrbetaprior_bg_protect = double(0);
            vals_r__ = context__.vals_r("beta_distrbetaprior_bg_protect");
            pos__ = 0;
            beta_distrbetaprior_bg_protect = vals_r__[pos__++];
            check_greater_or_equal(function__, "beta_distrbetaprior_bg_protect", beta_distrbetaprior_bg_protect, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 39;
            num_params_r__ += 1;
            current_statement_begin__ = 42;
            num_params_r__ += 1;
            current_statement_begin__ = 43;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_background_mixture_model() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 36;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta", "double", context__.to_vec());
        double theta(0);
        theta = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("bg_protect_prob")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable bg_protect_prob missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("bg_protect_prob");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "bg_protect_prob", "double", context__.to_vec());
        double bg_protect_prob(0);
        bg_protect_prob = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, bg_protect_prob);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable bg_protect_prob: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("alpha_betabinom")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_betabinom missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_betabinom");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha_betabinom", "double", context__.to_vec());
        double alpha_betabinom(0);
        alpha_betabinom = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha_betabinom);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_betabinom: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("beta_betabinom")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_betabinom missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_betabinom");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_betabinom", "double", context__.to_vec());
        double beta_betabinom(0);
        beta_betabinom = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, beta_betabinom);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_betabinom: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 36;
            local_scalar_t__ theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.scalar_lub_constrain(0, 1, lp__);
            else
                theta = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 39;
            local_scalar_t__ bg_protect_prob;
            (void) bg_protect_prob;  // dummy to suppress unused var warning
            if (jacobian__)
                bg_protect_prob = in__.scalar_lub_constrain(0, 1, lp__);
            else
                bg_protect_prob = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 42;
            local_scalar_t__ alpha_betabinom;
            (void) alpha_betabinom;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_betabinom = in__.scalar_lb_constrain(0, lp__);
            else
                alpha_betabinom = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 43;
            local_scalar_t__ beta_betabinom;
            (void) beta_betabinom;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_betabinom = in__.scalar_lb_constrain(0, lp__);
            else
                beta_betabinom = in__.scalar_lb_constrain(0);
            // model body
            {
            current_statement_begin__ = 48;
            validate_non_negative_index("log_theta", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_theta(2);
            stan::math::initialize(log_theta, DUMMY_VAR__);
            stan::math::fill(log_theta, DUMMY_VAR__);
            current_statement_begin__ = 51;
            lp_accum__.add(beta_log<propto__>(theta, alpha_distrbetaprior_mixcoeff, beta_distrbetaprior_mixcoeff));
            current_statement_begin__ = 54;
            lp_accum__.add(beta_log<propto__>(bg_protect_prob, alpha_distrbetaprior_bg_protect, beta_distrbetaprior_bg_protect));
            current_statement_begin__ = 59;
            stan::model::assign(log_theta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        stan::math::log(theta), 
                        "assigning variable log_theta");
            current_statement_begin__ = 60;
            stan::model::assign(log_theta, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        stan::math::log((1 - theta)), 
                        "assigning variable log_theta");
            current_statement_begin__ = 62;
            for (int n = 1; n <= n_table_entries; ++n) {
                current_statement_begin__ = 63;
                lp_accum__.add((get_base1(n_frequencies, n, "n_frequencies", 1) * log_sum_exp((get_base1(log_theta, 1, "log_theta", 1) + binomial_log(get_base1(n_protect_pos, n, "n_protect_pos", 1), get_base1(n_total_pos, n, "n_total_pos", 1), bg_protect_prob)), (get_base1(log_theta, 2, "log_theta", 1) + beta_binomial_log(get_base1(n_protect_pos, n, "n_protect_pos", 1), get_base1(n_total_pos, n, "n_total_pos", 1), alpha_betabinom, beta_betabinom)))));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta");
        names__.push_back("bg_protect_prob");
        names__.push_back("alpha_betabinom");
        names__.push_back("beta_betabinom");
        names__.push_back("log_theta");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_table_entries);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_background_mixture_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double theta = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(theta);
        double bg_protect_prob = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(bg_protect_prob);
        double alpha_betabinom = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha_betabinom);
        double beta_betabinom = in__.scalar_lb_constrain(0);
        vars__.push_back(beta_betabinom);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 69;
            validate_non_negative_index("log_theta", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_theta(2);
            stan::math::initialize(log_theta, DUMMY_VAR__);
            stan::math::fill(log_theta, DUMMY_VAR__);
            current_statement_begin__ = 71;
            validate_non_negative_index("log_lik", "n_table_entries", n_table_entries);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n_table_entries);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 74;
            stan::model::assign(log_theta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        stan::math::log(theta), 
                        "assigning variable log_theta");
            current_statement_begin__ = 75;
            stan::model::assign(log_theta, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        stan::math::log((1 - theta)), 
                        "assigning variable log_theta");
            current_statement_begin__ = 77;
            for (int n = 1; n <= n_table_entries; ++n) {
                current_statement_begin__ = 78;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (get_base1(n_frequencies, n, "n_frequencies", 1) * log_sum_exp((get_base1(log_theta, 1, "log_theta", 1) + binomial_log(get_base1(n_protect_pos, n, "n_protect_pos", 1), get_base1(n_total_pos, n, "n_total_pos", 1), bg_protect_prob)), (get_base1(log_theta, 2, "log_theta", 1) + beta_binomial_log(get_base1(n_protect_pos, n, "n_protect_pos", 1), get_base1(n_total_pos, n, "n_total_pos", 1), alpha_betabinom, beta_betabinom)))), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 69;
            size_t log_theta_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < log_theta_j_1_max__; ++j_1__) {
                vars__.push_back(log_theta(j_1__));
            }
            current_statement_begin__ = 71;
            size_t log_lik_j_1_max__ = n_table_entries;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_background_mixture_model";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "bg_protect_prob";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_betabinom";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_betabinom";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t log_theta_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < log_theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n_table_entries;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "bg_protect_prob";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_betabinom";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_betabinom";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t log_theta_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < log_theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n_table_entries;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_background_mixture_model_namespace::model_background_mixture_model stan_model;
#endif
